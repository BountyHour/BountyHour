// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

// Auth DB tables
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String?
    access_token      String?
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String?
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    posts         Post[]
    bounties      Bounty[]
    Message       Message[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

// Non-auth DB tables
model Post {
    id        Int      @id @default(autoincrement())
    name      String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    createdBy   User   @relation(fields: [createdById], references: [id])
    createdById String

    @@index([name])
}

enum BountyStatus {
    DRAFT
    OPEN
    IN_PROGRESS
    SUBMITTED
    COMPLETED
    FAILED
}

model Bounty {
    id               Int          @id @default(autoincrement())
    status           BountyStatus @default(DRAFT)
    title            String
    description      String
    createdAt        DateTime     @default(now())
    updatedAt        DateTime     @updatedAt
    messagesAuthored Message[]    @relation("author")
    messagesReceived Message[]    @relation("recipient")

    createdBy   User      @relation(fields: [createdById], references: [id])
    createdById String
    Message     Message[]
}

model Message {
    id          Int    @id @default(autoincrement())
    text        String
    author      User   @relation(fields: [authorId], references: [id])
    authorId    String
    recipient   User   @relation(fields: [recipientId], references: [id])
    recipientId String
    bounty      Bounty @relation(fields: [bountyId], references: [id])
    bountyId    Int
    Bounty      Bounty @relation(fields: [bountyId], references: [id])
    Bounty      Bounty @relation(fields: [bountyId], references: [id])
    Bounty      Bounty @relation(fields: [bountyId], references: [id])
}
