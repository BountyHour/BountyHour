// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

// Auth DB tables
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String?
    access_token      String?
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String?
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id               String    @id @default(cuid())
    name             String?
    email            String?   @unique
    emailVerified    DateTime?
    image            String?
    accounts         Account[]
    sessions         Session[]
    posts            Post[]
    bounties         Bounty[]
    sentMessages     Message[] @relation("SentMessages")
    receivedMessages Message[] @relation("ReceivedMessages")
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Post {
    id          Int      @id @default(autoincrement())
    name        String
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt
    createdBy   User     @relation(fields: [createdById], references: [id])
    createdById String

    @@index([name])
}

enum BountyStatus {
    DRAFT // Partially prepared, but not listed yet.
    OPEN // Listed, and able to be picked up.
    IN_PROGRESS // Currently being worked on, nobody else can pick it up.
    SUBMITTED // Specialist has submitted their solution, it has not been accepted yet.
    COMPLETED // Submitter has accepted the solution, contract is complete. Optionally give bonus.
    FAILED // Specialist ran out of time, or manually gave up. Can now go back into "Open".
}

model Bounty {
    id            Int          @id @default(autoincrement())
    status        BountyStatus @default(DRAFT)
    title         String
    description   String
    createdAt     DateTime     @default(now())
    updatedAt     DateTime     @updatedAt
    messages      Message[]    @relation()
    createdBy     User         @relation(fields: [createdById], references: [id])
    createdById   String
    statusHistory History[]

    @@index([createdById])
}

model Message {
    id          Int          @id @default(autoincrement())
    bounty      Bounty       @relation(fields: [bountyId], references: [id])
    bountyId    Int
    text        String
    author      User         @relation("SentMessages", fields: [authorId], references: [id])
    authorId    String
    recipient   User         @relation("ReceivedMessages", fields: [recipientId], references: [id])
    recipientId String
    isAutomated Boolean      @default(false)
    attachments Attachment[]
    createdAt   DateTime     @default(now())

    @@index([createdAt])
}

model Attachment {
    id        Int      @id @default(autoincrement())
    message   Message  @relation(fields: [messageId], references: [id])
    messageId Int
    url       String
    createdAt DateTime @default(now())

    @@index([createdAt])
}

model History {
    id        Int          @id @default(autoincrement())
    bounty    Bounty       @relation(fields: [bountyId], references: [id])
    bountyId  Int
    status    BountyStatus
    createdAt DateTime     @default(now())

    @@index([createdAt])
}
